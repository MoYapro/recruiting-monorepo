openapi: 3.0.2
info:
  version: '1.0.0'
  title: iits chess api
  contact:
    email: recruiting@iits-consulting.de
    url: https://iits-consulting.de/karriere
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://iits-consulting.de/wp-content/uploads/2024/03/logo-iits-2024-final-filled.svg'

  description: |
    Hello World!

paths:
  '/players':
    get:
      tags:
      - Player
      summary: Get all registered players
      operationId: getAllPlayers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
    put:
      tags:
      - Player
      summary: Update data of a player
      operationId: updatePlayer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Unique identifier; username
                  type: string
                  minLength: 1
                  example: Max Mustermann
                displayName:
                  description: Display name of the player
                  type: string
                  minLength: 1
                  example: Maxi
                email:
                  description: User email address
                  type: string
                  example: max.mustermann@iits-consulting.de
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Player'
        '400':
          description: Invalid player supplied
        '404':
          description: Player not found in database
    post:
      tags:
      - Player
      summary: Create a new player
      operationId: createNewPlayer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Unique identifier; username
                  type: string
                  minLength: 1
                  example: Max Mustermann
                displayName:
                  description: Display name of the player
                  type: string
                  minLength: 1
                  example: Maxi
                email:
                  description: User email address
                  type: string
                  example: max.mustermann@iits-consulting.de
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid player supplied

  '/players/{username}':
    get:
      tags:
      - Player
      summary: Get player by username
      operationId: getPlayerByUsername
      parameters:
      - name: username
        in: path
        description: The username of the player
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found in database

  '/matches':
    get:
      tags:
      - Match
      summary: Get all matches
      operationId: getAllMatches
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
    post:
      tags:
      - Match
      summary: Create a new match
      operationId: createNewMatch
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                whitePlayerUsername:
                  description: Unique name of the player with white figures
                  type: string
                  minLength: 1
                  example: Max Mustermann
                blackPlayerUsername:
                  description: Unique name of the player with black figures
                  type: string
                  minLength: 1
                  example: Lieschen Müller
                outcome:
                  description: Result of the match
                  type: string
                  enum: [BLACK_WINS, WHITE_WINS, DRAW]
        description: Updated match object
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '400':
          description: Invalid match supplied

  '/rankings':
    get:
      tags:
      - Ranking
      summary: Get the top x players
      operationId: getRankings
      parameters:
      - name: top
        in: query
        description: Number of top players
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ranking'
        '400':
          description: Bad Request
components:
  schemas:
    Player:
      type: object
      properties:
        username:
          description: Unique identifier; username
          type: string
          minLength: 1
          example: Max Mustermann
        displayName:
          description: Display name of the player
          type: string
          minLength: 1
          example: Maxi
        email:
          description: User email address
          type: string
          example: max.mustermann@iits-consulting.de
        elo:
          description: Skill rating of the user
          type: integer
          minLength: 1
          example: 1337
    Match:
      type: object
      properties:
        id:
          description: Database id of the match
          type: string
          example: DFA924F7-98DC-45B7-AD5E-5A8475710B91
        whitePlayerUsername:
          description: Unique name of the player with white figures
          type: string
          minLength: 1
          example: Max Mustermann
        blackPlayerUsername:
          description: Unique name of the player with black figures
          type: string
          minLength: 1
          example: Lieschen Müller
        outcome:
          description: Result of the match
          type: string
          enum: [BLACK_WINS, WHITE_WINS, DRAW]
        playedOn:
          description: Date of the match
          type: string
          example: "2024-02-19T15:00:00.000Z"
    Ranking:
      type: object
      properties:
        rank:
          description: Rank of the player according to elo
          type: number
          minimum: 1
          example: 42
        player:
          $ref: '#/components/schemas/Player'
